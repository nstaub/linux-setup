# set editor and shell
export EDITOR="/usr/bin/vim --servername dog --cmd 'let g:user_mode=1'"
export TMUX_BIN=/usr/local/bin/tmux

ZSH_THEME="agnoster" # EPIGEN_DEL_LINE_COLORSCHEME_LIGHT
# ZSH_THEME="" # EPIGEN_ADD_LINE_COLORSCHEME_LIGHT

source $ZSH/oh-my-zsh.sh

# Vi mode in ZSH
# bindkey -v # EPIGEN_ADD_LINE_TOMAS

# I dont like shared history between terminals, does not play well with tmux
unsetopt share_history

# use the vi navigation keys in menu completion
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# the location of `once generated ctags file`
export CTAGS_FILE_ONCE="~/tags-once"

# source the common additions for all shells
source "$GIT_PATH/linux-setup/appconfig/shell/commons.sh"

# alias the "bash's" command history to "zshell's" command read
# handy for common tmuxinator scripts
historyRead() {

  eval "print $*"
}
alias history='historyRead'

# running new tmux (or attaching) with session name derived from parent zsh pid
runTmux() {

  SESSION_NAME="T$PPID"

  # try to find session with the correct session id (based on the zsh PID)
  EXISTING_SESSION=`$TMUX_BIN ls 2> /dev/null | grep "$SESSION_NAME" | wc -l`

  if [ "$EXISTING_SESSION" -gt "0" ]; then

    # if such session exists, attach to it
    $TMUX_BIN -2 attach-session -t "$SESSION_NAME"

  else

    # if such session does not exist, create it
    $TMUX_BIN new-session -s "$SESSION_NAME"

  fi

  # hook after exitting the session
  # when the session exists, find a file in /tmp with the name of the session
  # and extract a path from it. Then cd to it.
  FILENAME="/tmp/tmux_restore_path.txt"
  if [ -f $FILENAME ]; then

    MY_PATH=$(tail -n 1 $FILENAME)

    rm /tmp/tmux_restore_path.txt

    cd $MY_PATH

  fi
}

zshexit() {

  # if there is a tmux session with the same name as the current bashpid
  num=`$TMUX_BIN ls 2> /dev/null | grep "T$PPID" | wc -l`
  if [ "$num" -gt "0" ]; then

    pids=`tmux list-panes -s -t "T$PPID" -F "#{pane_pid} #{pane_current_command}" | grep -v tmux | awk '{print $1}'`

    for pid in "$pids"; do
       killp "$pid"
    done

    $TMUX_BIN kill-session -t "T$PPID"

  fi
}

# VIM alias for running vim in tmux and in servermode
runVim() {

  { generateTags & disown; } 2> /dev/null

  VIM_CMD=$(echo "$EDITOR ${@}")

  # if the tmux session does not exist, create new and run vim in it
  if [ -z $TMUX ]; then

    SESSION_NAME="T$PPID"

    # if there is a tmux session with the same name as the current bashpid
    num=`$TMUX_BIN ls 2> /dev/null | grep "$SESSION_NAME" | wc -l`
    if [ "$num" -gt "0" ]; then

      ID=`$TMUX_BIN new-window -t "$SESSION_NAME" -a -P`
      sleep 1.0
      $TMUX_BIN send-keys -t $ID "$VIM_CMD" C-m
      $TMUX_BIN -2 attach-session -t "$SESSION_NAME"

    else

      $TMUX_BIN new-session -s "$SESSION_NAME" -d "$VIM_CMD" \; attach

    fi

  else

    zsh -c "$VIM_CMD"

  fi
}
alias vim=runVim

alias vimdiff="vim -d"

kzsh() {
  for i in `ps aux | grep "\-[z]sh" | awk '{print $2}'`; do
    killp "$i"
  done
}

# source tmuxinator
source $GIT_PATH/linux-setup/submodules/tmuxinator/completion/tmuxinator.zsh

# by default, athame should be off
export ATHAME_ENABLED=0
export ATHAME_SHOW_MODE=0
export ATHAME_VIM_PERSIST=0

# but if we are in tmux launched by the user/terminal (not tmuxinator)
# and if user want to use athame, use it
if [ -n "$TMUX" ]; then

  if [ "$USE_ATHAME" = "true" ]; then

    SESSION_NAME=`$TMUX_BIN display-message -p '#S'`

    if [[ $SESSION_NAME =~ ^T[0-9]+$ ]]; then

      export ATHAME_ENABLED=1

    fi
  fi
fi

# load tmux automatically
if [ "$RUN_TMUX" = "true" ]; then
  if command -v $TMUX_BIN>/dev/null; then
    if [ ! -z "$PS1" ]; then # unless shell not loaded interactively, run tmux
      [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && runTmux
    fi
  fi
fi
